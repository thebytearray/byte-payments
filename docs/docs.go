// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@bytepayments.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/currencies": {
            "get": {
                "description": "Returns a list of all supported currencies with their exchange rates and symbols",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currencies"
                ],
                "summary": "Get all available currencies",
                "responses": {
                    "200": {
                        "description": "Currencies retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "No currencies found",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/payments/create": {
            "post": {
                "description": "Creates a new payment with the specified plan and currency, generates a TRX wallet address and QR code for payment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Create a new payment",
                "parameters": [
                    {
                        "description": "Payment creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.PaymentResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiResponse"
                        }
                    },
                    "422": {
                        "description": "Payment creation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/payments/{id}/cancel": {
            "patch": {
                "description": "Cancels an existing payment by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Cancel a payment",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"payment_123456\"",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment cancelled successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Payment not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/payments/{id}/status": {
            "get": {
                "description": "Retrieves the current status of a payment by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Get payment status",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"payment_123456\"",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment status retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.PaymentResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Payment not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/plans": {
            "get": {
                "description": "Returns a list of all available subscription plans with their pricing and features",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "plans"
                ],
                "summary": "Get all subscription plans",
                "responses": {
                    "200": {
                        "description": "Plans retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "No plans found",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/verification/send-code": {
            "post": {
                "description": "Sends a verification code to the provided email address for account verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "verification"
                ],
                "summary": "Send email verification code",
                "parameters": [
                    {
                        "description": "Email verification request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SendVerificationCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verification code sent successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.SendVerificationCodeResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid email format or request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to send verification code",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/verification/verify-code": {
            "post": {
                "description": "Verifies the email verification code and returns a verification token upon successful verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "verification"
                ],
                "summary": "Verify email verification code",
                "parameters": [
                    {
                        "description": "Email verification code request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyEmailCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.VerifyEmailCodeResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or verification failed",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid verification code",
                        "schema": {
                            "$ref": "#/definitions/dto.ApiResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ApiResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "dto.CreatePaymentRequest": {
            "type": "object",
            "required": [
                "currency_code",
                "verification_token"
            ],
            "properties": {
                "currency_code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "verification_token": {
                    "type": "string"
                }
            }
        },
        "dto.PaymentResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "payment_id": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "qr_image": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.PaymentStatus"
                },
                "trx_amount": {
                    "type": "number"
                },
                "trx_wallet_address": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.SendVerificationCodeRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.SendVerificationCodeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.VerifyEmailCodeRequest": {
            "type": "object",
            "required": [
                "code",
                "email"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.VerifyEmailCodeResponse": {
            "type": "object",
            "properties": {
                "is_valid": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                },
                "verification_token": {
                    "type": "string"
                }
            }
        },
        "model.PaymentStatus": {
            "type": "string",
            "enum": [
                "pending",
                "completed",
                "cancelled",
                "expired"
            ],
            "x-enum-varnames": [
                "Pending",
                "Completed",
                "Cancelled",
                "Expired"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "BytePayments API",
	Description:      "A payment processing API for BytePayments platform",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
